"""
Aplica√ß√£o para Hugging Face Spaces
Vers√£o simplificada do AutoU Classificador
"""

import gradio as gr
import google.generativeai as genai
import os
import PyPDF2
import tempfile

# Configurar Gemini
gemini_api_key = os.getenv('GEMINI_API_KEY')
if gemini_api_key and gemini_api_key != 'SUA_CHAVE_GEMINI_AQUI':
    genai.configure(api_key=gemini_api_key)
    gemini_client = genai.GenerativeModel('gemini-2.0-flash')
else:
    gemini_client = None

def extract_text_from_pdf(file):
    """Extrai texto de arquivo PDF"""
    try:
        with tempfile.NamedTemporaryFile(delete=False, suffix='.pdf') as tmp_file:
            tmp_file.write(file)
            tmp_file_path = tmp_file.name
        
        with open(tmp_file_path, 'rb') as file:
            pdf_reader = PyPDF2.PdfReader(file)
            text = ""
            for page in pdf_reader.pages:
                text += page.extract_text()
        
        os.unlink(tmp_file_path)
        return text
    except Exception as e:
        return f"Erro ao ler PDF: {str(e)}"

def classify_email_with_ai(text):
    """Classifica o email usando Gemini"""
    try:
        prompt = f"""
        Classifique o seguinte email em uma das categorias:
        - "Produtivo": Emails que requerem uma a√ß√£o ou resposta espec√≠fica
        - "Improdutivo": Emails que n√£o necessitam de uma a√ß√£o imediata

        Email:
        {text}

        Responda APENAS com uma das palavras: "Produtivo" ou "Improdutivo"
        """

        if not gemini_client:
            return "MODO_TESTE"
            
        response = gemini_client.generate_content(prompt)
        classification = response.text.strip()
        
        # Garantir que a resposta seja v√°lida
        if classification.lower() in ["produtivo", "improdutivo"]:
            return classification.capitalize()
        else:
            return "MODO_TESTE"
    except Exception as e:
        return f"Erro na classifica√ß√£o: {str(e)}"

def generate_response_with_ai(text, classification):
    """Gera resposta autom√°tica baseada na classifica√ß√£o"""
    try:
        if classification == "Produtivo":
            prompt = f"""
            O email abaixo foi classificado como PRODUTIVO.
            Gere uma resposta profissional para um cliente do setor financeiro.
            A resposta deve ser cordial, demonstrar que a solicita√ß√£o foi recebida,
            indicar que o time ir√° analisar o caso e assinar como "Equipe de Suporte AutoU".

            Email original:
            {text}

            Resposta sugerida:
            """
        else:
            prompt = f"""
            O email abaixo foi classificado como IMPRODUTIVO.
            Gere uma resposta curta, cordial e profissional.
            A resposta deve ser breve, agradecer e assinar como "Equipe AutoU".

            Email original:
            {text}

            Resposta sugerida:
            """

        if not gemini_client:
            return """Ol√°!

Obrigado pelo seu contato. Recebemos sua mensagem e nossa equipe ir√° analis√°-la em breve.

Devido a limita√ß√µes tempor√°rias da API, estamos processando emails em modo de demonstra√ß√£o. Em breve retornaremos ao funcionamento normal.

Atenciosamente,
Equipe AutoU"""

        response = gemini_client.generate_content(prompt)
        return response.text.strip()
    except Exception as e:
        return f"Erro na gera√ß√£o de resposta: {str(e)}"

def process_email(email_text, uploaded_file):
    """Processa o email e retorna classifica√ß√£o e resposta"""
    if not email_text and not uploaded_file:
        return "‚ùå Por favor, insira um texto ou fa√ßa upload de um arquivo.", "", ""
    
    # Determinar o texto a processar
    if uploaded_file:
        if uploaded_file.name.endswith('.pdf'):
            text = extract_text_from_pdf(uploaded_file)
        else:
            text = uploaded_file.decode('utf-8')
    else:
        text = email_text
    
    if not text.strip():
        return "‚ùå Texto vazio ap√≥s processamento.", "", ""
    
    try:
        # Classificar
        classification = classify_email_with_ai(text)
        
        # Gerar resposta
        response = generate_response_with_ai(text, classification)
        
        # Formatar resultado
        if classification == "Produtivo":
            result = f"üèÜ **{classification}** - Este email requer a√ß√£o/resposta"
        else:
            result = f"‚ÑπÔ∏è **{classification}** - Este email n√£o requer a√ß√£o imediata"
        
        return result, response, text[:200] + "..." if len(text) > 200 else text
        
    except Exception as e:
        return f"‚ùå Erro no processamento: {str(e)}", "", ""

# Interface Gradio
with gr.Blocks(
    title="AutoU - Classificador de Emails",
    theme=gr.themes.Soft(),
    css="""
    .gradio-container {
        max-width: 1200px !important;
    }
    """
) as demo:
    
    gr.Markdown("""
    # üìß AutoU - Classificador de Emails com IA
    
    **Classifica√ß√£o inteligente de emails e gera√ß√£o de respostas autom√°ticas**
    
    Esta aplica√ß√£o utiliza IA para classificar emails em **Produtivo** (requer a√ß√£o) ou **Improdutivo** (n√£o requer a√ß√£o) e sugerir respostas autom√°ticas adequadas.
    """)
    
    with gr.Row():
        with gr.Column(scale=2):
            gr.Markdown("### üì® Enviar Email para An√°lise")
            
            email_text = gr.Textbox(
                label="Texto do Email",
                placeholder="Cole aqui o conte√∫do do email que deseja classificar...",
                lines=6,
                max_lines=10
            )
            
            uploaded_file = gr.File(
                label="Ou fa√ßa upload de um arquivo",
                file_types=[".txt", ".pdf"],
                file_count="single"
            )
            
            process_btn = gr.Button("üß† Classificar Email", variant="primary", size="lg")
        
        with gr.Column(scale=1):
            gr.Markdown("### ‚ÑπÔ∏è Sobre a Classifica√ß√£o")
            
            gr.Markdown("""
            **üèÜ Produtivo**: Emails que requerem a√ß√£o
            - Solicita√ß√µes de suporte
            - D√∫vidas t√©cnicas  
            - Problemas com sistema
            - Solicita√ß√µes de informa√ß√µes
            
            **‚ÑπÔ∏è Improdutivo**: Emails que n√£o requerem a√ß√£o
            - Felicita√ß√µes
            - Agradecimentos
            - Mensagens informativas
            - Spam ou irrelevantes
            """)
    
    with gr.Row():
        with gr.Column():
            result = gr.Markdown(label="üìä Resultado da Classifica√ß√£o")
            
            response = gr.Textbox(
                label="üí¨ Resposta Sugerida",
                lines=6,
                interactive=False
            )
            
            original_text = gr.Textbox(
                label="üìÑ Texto Analisado",
                lines=3,
                interactive=False
            )
    
    # Exemplos
    gr.Markdown("### üìù Exemplos de Teste")
    
    with gr.Row():
        gr.Examples(
            examples=[
                ["Ol√°, estou com problema para acessar minha conta. Podem me ajudar?", "Produtivo"],
                ["Feliz Natal para toda a equipe! Obrigado pelo excelente trabalho.", "Improdutivo"],
                ["Preciso de informa√ß√µes sobre os novos produtos financeiros dispon√≠veis.", "Produtivo"],
                ["Obrigado pelo atendimento excelente de hoje!", "Improdutivo"]
            ],
            inputs=[email_text],
            label="Clique em um exemplo para testar"
        )
    
    # Event handlers
    process_btn.click(
        fn=process_email,
        inputs=[email_text, uploaded_file],
        outputs=[result, response, original_text]
    )
    
    gr.Markdown("---")
    gr.Markdown("**Desenvolvido para o Case Pr√°tico da AutoU** üöÄ")

if __name__ == "__main__":
    demo.launch()

