import streamlit as st
import google.generativeai as genai
import os
from dotenv import load_dotenv
import PyPDF2
import tempfile

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="AutoU - Classificador de Emails",
    page_icon="üìß",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Carregar vari√°veis de ambiente
load_dotenv()

# Configurar Gemini
gemini_api_key = os.getenv('GEMINI_API_KEY')
if gemini_api_key and gemini_api_key != 'SUA_CHAVE_GEMINI_AQUI':
    genai.configure(api_key=gemini_api_key)
    gemini_client = genai.GenerativeModel('gemini-2.0-flash')
else:
    gemini_client = None

def extract_text_from_pdf(file):
    """Extrai texto de arquivo PDF"""
    try:
        with tempfile.NamedTemporaryFile(delete=False, suffix='.pdf') as tmp_file:
            tmp_file.write(file.getvalue())
            tmp_file_path = tmp_file.name
        
        with open(tmp_file_path, 'rb') as file:
            pdf_reader = PyPDF2.PdfReader(file)
            text = ""
            for page in pdf_reader.pages:
                text += page.extract_text()
        
        os.unlink(tmp_file_path)
        return text
    except Exception as e:
        return f"Erro ao ler PDF: {str(e)}"

def preprocess_text(text):
    """Pr√©-processa o texto do email"""
    text = text.strip()
    text = ' '.join(text.split())
    return text

def classify_email_with_ai(text):
    """Classifica o email usando Gemini"""
    try:
        if not gemini_client:
            return "MODO_TESTE"
            
        prompt = f"""
        Classifique o seguinte email em uma das categorias:
        - "Produtivo": Emails que requerem uma a√ß√£o ou resposta espec√≠fica (ex.: solicita√ß√µes de suporte t√©cnico, atualiza√ß√£o sobre casos em aberto, d√∫vidas sobre o sistema)
        - "Improdutivo": Emails que n√£o necessitam de uma a√ß√£o imediata (ex.: mensagens de felicita√ß√µes, agradecimentos)

        Email:
        {text}

        Responda APENAS com uma das palavras: "Produtivo" ou "Improdutivo"
        """

        response = gemini_client.generate_content(prompt)
        classification = response.text.strip()
        
        # Garantir que a resposta seja v√°lida
        if classification.lower() in ["produtivo", "improdutivo"]:
            return classification.capitalize()
        else:
            return "MODO_TESTE"
            
    except Exception as e:
        return "MODO_TESTE"
    except Exception as e:
        return f"Erro na classifica√ß√£o: {str(e)}"

def generate_response_with_ai(text, classification):
    """Gera resposta autom√°tica baseada na classifica√ß√£o"""
    try:
        if classification == "Produtivo":
            prompt = f"""
            O email abaixo foi classificado como PRODUTIVO (requer a√ß√£o/resposta).
            Gere uma resposta profissional e proativa para um cliente do setor financeiro.
            A resposta deve:
            - Ser cordial e profissional
            - Demonstrar que a solicita√ß√£o foi recebida
            - Indicar que o time ir√° analisar o caso
            - Solicitar mais informa√ß√µes se necess√°rio
            - Assinar como "Equipe de Suporte AutoU"

            Email original:
            {text}

            Resposta sugerida:
            """
        else:  # Improdutivo
            prompt = f"""
            O email abaixo foi classificado como IMPRODUTIVO (n√£o requer a√ß√£o imediata).
            Gere uma resposta curta, cordial e profissional para um cliente do setor financeiro.
            A resposta deve:
            - Ser breve e agradecer
            - Manter tom profissional
            - Assinar como "Equipe AutoU"

            Email original:
            {text}

            Resposta sugerida:
            """

        if not gemini_client:
            return """Ol√°!

Obrigado pelo seu contato. Recebemos sua mensagem e nossa equipe ir√° analis√°-la em breve.

Devido a limita√ß√µes tempor√°rias da API, estamos processando emails em modo de demonstra√ß√£o. Em breve retornaremos ao funcionamento normal.

Atenciosamente,
Equipe AutoU"""

        response = gemini_client.generate_content(prompt)
        return response.text.strip()
    except Exception as e:
        return f"Erro na gera√ß√£o de resposta: {str(e)}"

def main():
    """Fun√ß√£o principal da aplica√ß√£o Streamlit"""
    
    # Header
    st.title("üìß AutoU - Classificador de Emails com IA")
    st.markdown("**Classifica√ß√£o inteligente de emails e gera√ß√£o de respostas autom√°ticas**")
    
    # Sidebar
    st.sidebar.header("‚öôÔ∏è Configura√ß√µes")
    
    # Verificar se a chave da API est√° configurada
    if not gemini_api_key or gemini_api_key == "SUA_CHAVE_GEMINI_AQUI":
        st.error("‚ö†Ô∏è Chave da API Gemini n√£o configurada!")
        st.info("Configure a vari√°vel de ambiente GEMINI_API_KEY")
        return
    
    # Op√ß√µes de entrada
    st.sidebar.subheader("üìù Forma de Entrada")
    input_method = st.sidebar.radio(
        "Como deseja enviar o email?",
        ["Texto Direto", "Upload de Arquivo"]
    )
    
    # √Årea principal
    col1, col2 = st.columns([2, 1])
    
    with col1:
        st.subheader("üì® Email para An√°lise")
        
        email_text = ""
        
        if input_method == "Texto Direto":
            email_text = st.text_area(
                "Cole o conte√∫do do email aqui:",
                height=200,
                placeholder="Digite ou cole o conte√∫do do email que deseja classificar..."
            )
        else:
            uploaded_file = st.file_uploader(
                "Fa√ßa upload de um arquivo (.txt ou .pdf)",
                type=['txt', 'pdf']
            )
            
            if uploaded_file is not None:
                if uploaded_file.type == "text/plain":
                    email_text = str(uploaded_file.read(), "utf-8")
                elif uploaded_file.type == "application/pdf":
                    email_text = extract_text_from_pdf(uploaded_file)
                else:
                    st.error("Tipo de arquivo n√£o suportado!")
                    return
        
        # Bot√£o de processamento
        if st.button("üß† Classificar Email", type="primary", disabled=not email_text.strip()):
            if email_text.strip():
                with st.spinner("Processando email com IA..."):
                    # Pr√©-processar texto
                    processed_text = preprocess_text(email_text)
                    
                    # Classificar
                    classification = classify_email_with_ai(processed_text)
                    
                    # Gerar resposta
                    response = generate_response_with_ai(processed_text, classification)
                    
                    # Exibir resultados
                    st.success("‚úÖ Email processado com sucesso!")
                    
                    # Classifica√ß√£o
                    st.subheader("üìä Resultado da Classifica√ß√£o")
                    if classification == "Produtivo":
                        st.success(f"üèÜ **{classification}** - Este email requer a√ß√£o/resposta")
                    else:
                        st.info(f"‚ÑπÔ∏è **{classification}** - Este email n√£o requer a√ß√£o imediata")
                    
                    # Resposta sugerida
                    st.subheader("üí¨ Resposta Sugerida")
                    st.text_area(
                        "Resposta autom√°tica gerada:",
                        value=response,
                        height=150,
                        disabled=True
                    )
                    
                    # Bot√£o para copiar
                    if st.button("üìã Copiar Resposta"):
                        st.write("Resposta copiada para a √°rea de transfer√™ncia!")
    
    with col2:
        st.subheader("‚ÑπÔ∏è Sobre a Classifica√ß√£o")
        
        st.info("""
        **Produtivo**: Emails que requerem a√ß√£o
        - Solicita√ß√µes de suporte
        - D√∫vidas t√©cnicas
        - Problemas com sistema
        - Solicita√ß√µes de informa√ß√µes
        """)
        
        st.warning("""
        **Improdutivo**: Emails que n√£o requerem a√ß√£o
        - Felicita√ß√µes
        - Agradecimentos
        - Mensagens informativas
        - Spam ou irrelevantes
        """)
        
        st.subheader("üîß Tecnologias")
        st.markdown("""
        - **IA**: Google Gemini 1.5 Flash
        - **Backend**: Python Streamlit
        - **Processamento**: NLP avan√ßado
        - **Interface**: Responsiva e intuitiva
        """)
    
    # Footer
    st.markdown("---")
    st.markdown("**Desenvolvido para o Case Pr√°tico da AutoU** üöÄ")

if __name__ == "__main__":
    main()
